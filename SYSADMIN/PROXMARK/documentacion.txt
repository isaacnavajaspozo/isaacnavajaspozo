===========================================================================================================================================
========================================[ INSTALACIÓN ]====================================================================================
===========================================================================================================================================

====[ Teoría ]===================================================

| Nombre                   | Memoria       | Organización                                        |
|--------------------------|---------------|-----------------------------------------------------|
| MiFare Classic 1K        | 1.024 bytes   | 16 sectores con 64 bytes                            |
| MiFare Classic 4K        | 4.096 bytes   | 32 sectores con 64 bytes y 8 sectores con 256 bytes |


# La proxmark dispone de dos tipos de tecnologías distintas:
 
    - La parte de arriba [High Frequency] : Antena de 13.56 MHz:
        incluye tarjetas que cumplen con el estándar ISO 14443, como las tarjetas MIFARE (por ejemplo, MIFARE Classic, MIFARE Ultralight) y las tarjetas ISO 15693. Estas son utilizadas en aplicaciones como transporte público, sistemas de pago y acceso a edificios.
  
    - La parte de abajo [Low Frequency] : Antena de 125 kHz: 
        incluyen tarjetas como las de tipo EM4100, que son comúnmente utilizadas en sistemas de control de acceso y en aplicaciones de identificación.


[ HARDWARE ]: 
+--------------------------------------------------+
|                   Proxmark3                      |
|                                                  |
|   +------------------------------------------+   |
|   |                                          |   |
|   |              Proxmark3 Board             |   |
|   |                                          |   |
|   +------------------------------------------+   |
|                                                  |
|   +----------------------+  +----------------+   |
|   |  USB (micro-USB)     |  |   Reset Button |   |
|   |  [ power & data ]    |  |   [reset]      |   |
|   +----------------------+  +----------------+   |
|                                                  |
|    +-----------------------------------------+   |
|    |   U.FL or SMA Antenna Connector         |   |
|    |   [ connect to RFID antenna ]           |   |
|    +-----------------------------------------+   |
|                                                  |
|    +-----------------------------------------+   |
|    |   JTAG (Debugging)                     |    |
|    |   [ low-level debugging ]              |    |
|    +-----------------------------------------+   |
|                                                  |
|    +-----------------------------------------+   |
|    |   Battery Connector (optional)         |    |
|    |   [ for autonomous use ]               |    |
|    +-----------------------------------------+   |
+--------------------------------------------------+




====[ Instalación ]==============================================

# repositorio : https://github.com/Proxmark/proxmark3

su                                                              # entro como super para tener permisos
apt update                                                      # actualizo repositorios
apt install -y git build-essential libreadline-dev gcc-arm-none-eabi libusb-1.0-0-dev pkg-config cmake libnewlib-arm-none-eabi              # instalo las dependencias necesarias
git clone https://github.com/RfidResearchGroup/proxmark3.git    # clono el repositorio en la carpeta raíz
cd proxmark3                                                    # entro en el proyecto clonado
make clean && make PLATFORM=PM3OTHER                            # compilo el software para la proxmark3
--------------------------------------------------------
    # en el caso de que salga al final un error:                # si me da error instalo las dependencias a las que me da error y vulvo a compilar, 
                                                                # en mi caso me da error con debian los siguientes paquetes
        apt install liblz4-dev
        apt install libbz2-dev
        apt install libssl-dev
        make clean && make PLATFORM=PM3OTHER 
--------------------------------------------------------

# ¡IMPORTANTE!
# conecto el cable a la Proxmark por el conector de batería mientras pulso el botón de reset (tras 5 segundos lo suelto)
lsusb                                                            # para comprobar que el USB está leyendo la proxmark
--------------------------------------------------------
Bus 001 Device 010: ID 2d2d:504d proxmark.org Proxmark3
--------------------------------------------------------

# flashear (actualizar) el firmware completo del dispositivo Proxmark3
./pm3-flash-fullimage

# se usa para iniciar la interfaz del Proxmark3 y establecer la comunicación con el dispositivo
cd client
./proxmark3 /dev/ttyACM0



===========================================================================================================================================
========================================[ INICIALIZAR PROGRAMA UNA VEZ INSTALADO ]=========================================================
===========================================================================================================================================

cd /proxmark3/client/
./proxmark3 /dev/ttyACM0


===========================================================================================================================================
========================================[ ESCRIBIR EN UNA NUEVA TARJETA ]==================================================================
===========================================================================================================================================

## En una tarjeta MIFARE Classic, cada sector tiene una estructura que incluye 4 bloques de datos (bloques 0 a 3). Cada bloque tiene 16 bytes (es decir, 16 valores en formato hexadecimal).
## Un sector es cada uno de estas cuatro divisiones. 


  8888888b.  888b     d888  .d8888b.
  888   Y88b 8888b   d8888 d88P  Y88b
  888    888 88888b.d88888      .d88P
  888   d88P 888Y88888P888     8888"
  8888888P"  888 Y888P 888      "Y8b.
  888        888  Y8P  888 888    888
  888        888   "   888 Y88b  d88P
  888        888       888  "Y8888P"    [ ☕ ]


====[ Escribir datos ]============================================

# comprueba los valores
[usb] pm3 --> hf mf chk  

# comprueba el hexádecimal del bloque 1 (001)
[usb] pm3 --> hf mf rdbl --blk 1
# para comprobar el bloque 1
[usb] pm3 --> hf mf rdbl --blk 1
==================================================================
[=]   # | sector 00 / 0x00                                | ascii
[=] ----+-------------------------------------------------+-----------------
[=]   1 | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F | ................
==================================================================

# cambia los valores del bloque 1 en hexádecimal
[usb] pm3 --> hf mf wrbl --blk 1 -d 112233445566778899AABBCCDDEEFF00
# para comprobar el bloque 1
[usb] pm3 --> hf mf rdbl --blk 1
==================================================================
[=]   # | sector 00 / 0x00                                | ascii
[=] ----+-------------------------------------------------+-----------------
[=]   1 | 11 22 33 44 55 66 77 88 99 AA BB CC DD EE FF 00 | ."3DUfw.........
==================================================================

# para comprobar todos los bloques del sector
# el sector 0 se utiliza para saber el usuario, en mi caso lo he utilizado para el ejemplo
[usb] pm3 --> hf mf rdsc -s 0
==================================================================
[=]   # | sector 00 / 0x00                                | ascii
[=] ----+-------------------------------------------------+-----------------
[=]   0 | 0C 12 F0 CF 21 08 04 00 62 63 64 65 66 67 68 69 | ....!...bcdefghi
[=]   1 | 11 22 33 44 55 66 77 88 99 AA BB CC DD EE FF 00 | ."3DUfw.........
[=]   2 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................
[=]   3 | 00 00 00 00 00 00 FF 07 80 69 FF FF FF FF FF FF | .........i......
==================================================================



===========================================================================================================================================
========================================[ MODIFICAR TARJETA ]==============================================================================
===========================================================================================================================================


  8888888b.  888b     d888  .d8888b.
  888   Y88b 8888b   d8888 d88P  Y88b
  888    888 88888b.d88888      .d88P
  888   d88P 888Y88888P888     8888"
  8888888P"  888 Y888P 888      "Y8b.
  888        888  Y8P  888 888    888
  888        888   "   888 Y88b  d88P
  888        888       888  "Y8888P"    [ ☕ ]


====[ Identificar tecnología ]===================================

[usb] pm3 --> help              # me va a servir para mostrar los comandos
[usb] pm3 --> hf                # me sirve para mostrarme los comandos con una tarjeta high frecuency
                                # puedo buscar con lf si quiero la otra antena
# coloco la tarjeta encima de la antena de Hig frecuency
[usb] pm3 --> hf search         # con la tarjeta colocada va a buscar que tipo de tarjeta es y sus características

# como datos importantes de la tarjeta son el UID, ATQA y el SAK
# en lo primero que me voy a fija es en el tipo de tarjeta, en mi caso es una MIFARE CLASSIC
# al ser una mifare vuelvo a lanzar un "hf", y observo que tengo que lanzar un "mf" para ->  MIFARE RFIDs... 
[usb] pm3 --> hf mf


====[ Hardcodear keys ]==========================================
# chk se utiliza para verificar el estado de la tarjeta MIFARE Classic, como la lectura de bloques de datos y el estado de las claves de autenticación
[usb] pm3 --> hf mf chk

# si necesitamos comandos especificmos le podemos pasar:
[usb] pm3 --> hf mf chk --help

[+] -----+-----+--------------+---+--------------+----
[+]  Sec | Blk | key A        |res| key B        |res
[+] -----+-----+--------------+---+--------------+----
[+]  000 | 003 | ------------ | 0 | A0B0C0D0E0F0 | 1
[+]  001 | 007 | ------------ | 0 | A0B0C0D0E0F0 | 1
[+]  002 | 011 | ------------ | 0 | A0B0C0D0E0F0 | 1
[+]  003 | 015 | ------------ | 0 | A0B0C0D0E0F0 | 1
[+]  004 | 019 | ------------ | 0 | A0B0C0D0E0F0 | 1
[+]  005 | 023 | ------------ | 0 | A0B0C0D0E0F0 | 1
[+]  006 | 027 | ------------ | 0 | A0B0C0D0E0F0 | 1
[+]  007 | 031 | ------------ | 0 | A0B0C0D0E0F0 | 1
[+]  008 | 035 | ------------ | 0 | A0B0C0D0E0F0 | 1
[+]  009 | 039 | ------------ | 0 | A0B0C0D0E0F0 | 1
[+]  010 | 043 | ------------ | 0 | A0B0C0D0E0F0 | 1
[+]  011 | 047 | ------------ | 0 | A0B0C0D0E0F0 | 1
[+]  012 | 051 | ------------ | 0 | A0B0C0D0E0F0 | 1
[+]  013 | 055 | ------------ | 0 | A0B0C0D0E0F0 | 1
[+]  014 | 059 | ------------ | 0 | A0B0C0D0E0F0 | 1
[+]  015 | 063 | ------------ | 0 | A0B0C0D0E0F0 | 1
[+] -----+-----+--------------+---+--------------+----
[+] ( 0:Failed / 1:Success )


====[ Leer sectores de tarjeta ]===================================
# rdsc se utiliza para leer los datos de un sector específico de una tarjeta MIFARE Classic
# por lo general en el sector 000 se guarda la identidad del usuario, a quien corresponde
# son pocos los sectores donde se guarda información útil

# hf mf rdsc -s <sector> -k B0B1B2B3B4B5 -b
hf mf rdsc -s 003 -k B0B1B2B3B4B5 -b

[=]   # | sector 03 / 0x03                                | ascii
[=] ----+-------------------------------------------------+-----------------
[=]  12 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................
[=]  13 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................
[=]  14 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................
[=]  15 | 00 00 00 00 00 00 FF 07 90 69 B0 B1 B2 B4 B4 B5 | .........i......


# solo en el caso de que el anterior comando no me esté devolviendo el ascii desencriptado:
-----------------------------------------------------------------------------------------------
    # si quiero desencriptar los hash que me devuelven tengo que instalar el paquete xxd
    apt install xxd -y

    # salgo del programa de la proxmark3 y ejecuto:
    echo "HASH _DE_LA_PROXMARK" | xxd -r; echo


====[ Incorporando un nuevo diccionario key ]========================
