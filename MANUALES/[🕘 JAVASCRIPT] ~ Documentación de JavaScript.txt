// =======================================================================================
// [üïòüü® 1. SALIDA Y DEBUG]
// =======================================================================================

// console.log(): salida est√°ndar
console.log("Hola Mundo");

// console.dir(): estructura detallada (profundidad, arrays, objetos)
console.dir({ a: 1, b: [1, 2, 3] }, { depth: null });

// console.error(): errores a stderr
console.error("Mensaje de error");

// typeof / Array.isArray(): tipo y verificaci√≥n de array
console.log(typeof 123);               // number
console.log(Array.isArray([1, 2, 3])); // true

// try/catch para manejo de excepciones
try {
    throw new Error("Error cr√≠tico");
} catch (e) {
    console.error(e.message);
}


// =======================================================================================
// [üïòüü® 2. STRINGS]
// =======================================================================================

// .length: longitud
console.log("texto".length);

// .substring(): subcadena
console.log("abcdef".substring(1, 4));  // bcd

// .indexOf(): b√∫squeda de subcadena
console.log("hola mundo".indexOf("mundo"));

// .replace(): reemplazo de texto
console.log("hola mundo".replace("mundo", "admin"));

// .trim(): eliminar espacios
console.log("   texto   ".trim());


// =======================================================================================
// [üïòüü® 3. ARRAYS]
// =======================================================================================

const a1 = [1, 2];
const a2 = [3, 4];

// .push(): a√±adir al final
a1.push(5, 6);

// .includes(): buscar elemento
console.log(a2.includes(3)); // true

// .concat() o spread: fusionar arrays
const fusion = [...a1, ...a2];

// .join(): array ‚Üí string
console.log(["uno", "dos"].join("-"));

// .split(): string ‚Üí array
const partes = "uno,dos,tres".split(",");

// .filter(), .map(), .reduce(): manipulaci√≥n funcional
const dobles = a1.map(n => n * 2);


// =======================================================================================
// [üïòüü® 4. OBJETOS]
// =======================================================================================

const user = { nombre: "admin", activo: true };

// "clave" in obj: existencia de clave
if ("nombre" in user) {
    console.log(user.nombre);
}

// delete: eliminar clave
delete user.activo;

// Object.keys() / Object.values()
console.log(Object.keys(user));   // ["nombre"]
console.log(Object.values(user)); // ["admin"]


// =======================================================================================
// [üïòüü® 5. VALIDACI√ìN Y SANEAMIENTO]
// =======================================================================================

// Verificar existencia
if (typeof variable !== "undefined" && variable !== null) {
    console.log("Definida");
}

// Verificar si "vac√≠a"
if (!"") {
    console.log("Vac√≠a");
}

// Validar email con RegEx
const email = "test@dominio.com";
if (/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
    console.log("Email v√°lido");
}


// =======================================================================================
// [üïòüü® 6. JSON]
// =======================================================================================

const obj = { user: "admin" };

// JSON.stringify(): objeto ‚Üí string JSON
const json = JSON.stringify(obj);

// JSON.parse(): string JSON ‚Üí objeto
const parsed = JSON.parse(json);


// =======================================================================================
// [üïòüü® 7. FECHAS Y TIEMPO]
// =======================================================================================

// Date actual en formato ISO
console.log(new Date().toISOString());

// Timestamp actual en segundos
console.log(Math.floor(Date.now() / 1000));

// Date.parse(): string ‚Üí timestamp (milisegundos)
console.log(Date.parse("2025-01-01") / 1000);

// Formato custom
const fecha = new Date();
console.log(`${fecha.getFullYear()}-${fecha.getMonth()+1}-${fecha.getDate()}`);


// =======================================================================================
// [üïòüü® 8. CRIPTOGRAF√çA Y CONTRASE√ëAS]
// =======================================================================================

const crypto = require("crypto");
const bcrypt = require("bcryptjs");

// Hash SHA256
const sha = crypto.createHash("sha256").update("mensaje").digest("hex");

// Bcrypt (hash y verificaci√≥n)
const hash = bcrypt.hashSync("clave123", 10);
if (bcrypt.compareSync("clave123", hash)) {
    console.log("Autenticado");
}


// =======================================================================================
// [üïòüü® 9. ARCHIVOS (Node.js)]
// =======================================================================================

const fs = require("fs");

// Leer archivo
const contenido = fs.readFileSync("log.txt", "utf8");

// Escribir archivo (sobrescribe)
fs.writeFileSync("log.txt", "nueva entrada\n");

// A√±adir al final (append)
fs.writeFileSync("log.txt", "otra entrada\n", { flag: "a" });

// Verificar existencia
if (fs.existsSync("config.json")) {
    console.log("Existe");
}

// Borrar archivo
fs.unlinkSync("temp.txt");

// Renombrar archivo
fs.renameSync("old.txt", "new.txt");

// Crear directorio
fs.mkdirSync("logs", { recursive: true });

// Eliminar directorio vac√≠o
fs.rmdirSync("logs");


// =======================================================================================
// [üïòüü® 10. HTTP / REDES]
// =======================================================================================

// fetch() en navegador
fetch("https://api.example.com")
    .then(r => r.json())
    .then(data => console.log(data))
    .catch(err => console.error(err));

// En Node.js usar: node-fetch o axios
// Ejemplo con axios:
const axios = require("axios");
axios.get("https://api.example.com")
    .then(res => console.log(res.data))
    .catch(err => console.error(err));


// =======================================================================================
// [üïòüü® 11. REDIRECCIONES / CABECERAS (NAVEGADOR)]
// =======================================================================================

// Redirecci√≥n
window.location.href = "https://example.com";

// Cabecera personalizada (solo en server o frameworks como Express)
// res.setHeader("Content-Type", "application/json");


// =======================================================================================
// [üïòüü® 12. SESIONES Y COOKIES (CLIENTE)]
// =======================================================================================

// set cookie (cliente)
document.cookie = "usuario=admin; path=/; max-age=3600";

// leer cookie
const cookies = document.cookie.split(";").map(c => c.trim());
console.log(cookies);

// eliminar cookie
document.cookie = "usuario=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/";


// =======================================================================================
// [üïòüü® 13. SEGURIDAD EN FORMULARIOS]
// =======================================================================================

// Escapar HTML (para prevenir XSS)
const sanitizeHTML = (str) => str.replace(/[&<>"']/g, m =>
    ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' }[m])
);

// CSRF token simulado (almacenado en localStorage/sessionStorage)
const csrfToken = crypto.randomBytes(32).toString("hex");
localStorage.setItem("csrf", csrfToken);

// Validaci√≥n (ejemplo te√≥rico)
if (localStorage.getItem("csrf") === tokenRecibido) {
    console.log("CSRF token v√°lido");
}


// =======================================================================================
// [üïòüü® 14. DOM & EVENTOS (NAVEGADOR)]
// =======================================================================================

// getElementById / querySelector: selecci√≥n de nodos
const el1 = document.getElementById("idElemento");
const el2 = document.querySelector(".clase");

// querySelectorAll: m√∫ltiple selecci√≥n
document.querySelectorAll(".items").forEach(item => {
    console.log(item.textContent);
});

// Crear y a√±adir elemento
const nuevo = document.createElement("div");
nuevo.textContent = "Nuevo elemento";
document.body.appendChild(nuevo);

// Modificar contenido
el1.textContent = "Actualizado";
el1.innerHTML = "<strong>Con HTML</strong>";

// A√±adir evento
el1.addEventListener("click", () => {
    console.log("Click detectado");
});

// Cambiar estilos
el1.style.color = "red";

// Eliminar elemento
el1.remove();
