###############################################################
0 - PRINCIPIOS DE BASES DE DATOS Y DIAGRAMAS DE VENN
###############################################################

Las bases de datos son sistemas diseñados para almacenar, gestionar y recuperar información de manera eficiente. En este contexto, InnoDB es un motor de almacenamiento para MySQL que ofrece soporte para transacciones, integridad referencial y bloqueo de nivel de fila. InnoDB utiliza un modelo de datos basado en tablas y es el motor por defecto en las versiones recientes de MySQL.

Diagrama de Venn de Bases de Datos:
- Datos: Información sin procesar que se almacena en la base de datos.
- Información: Datos procesados que tienen significado.
- Conocimiento: Información interpretada que puede ser utilizada para la toma de decisiones.

# Diagrama de Venn: no | yes | no
SELECT * FROM Usuarios INNER JOIN Post ON usuarios_id = Post.Usuario_id

# Diagrama de Venn: yes | no | no
SELECT * FROM Usuarios INNER JOIN Post ON usuarios_id = Post.Usuario_id WHERE post.usuario_id IS NULL

# Diagrama de Venn: yes | yes | no
# Cuando se utiliza esta forma se puede utilizar directamente JOIN en vez de LEFT JOIN, ya que es la forma por defecto
SELECT * FROM Usuarios LEFT JOIN Post ON usuarios_id = Post.Usuario_id

# Diagrama de Venn: yes | yes | yes
SELECT * FROM Usuarios LEFT JOIN Post ON usuarios_id = Post.Usuario_id UNION SELECT * FROM Usuarios RIGHT JOIN Post ON usuarios_id = Post.Usuario_id


###############################################################
1 - SQL BÁSICO
###############################################################

SQL (Structured Query Language) es un lenguaje estándar para la gestión y manipulación de bases de datos. Se divide en varias categorías:

DML (Data Manipulation Language):
- SELECT: Recupera datos de una o más tablas.
- INSERT: Inserta nuevas filas en una tabla.
- UPDATE: Modifica datos existentes en una tabla.
- DELETE: Elimina filas de una tabla.
- MERGE: Combina registros basados en condiciones específicas.
- CALL: Llama a un procedimiento almacenado.

DDL (Data Definition Language):
- CREATE: Crea un nuevo objeto en la base de datos (tabla, índice, vista).
- ALTER: Modifica un objeto existente.
- DROP: Elimina un objeto de la base de datos.
- TRUNCATE: Elimina todas las filas de una tabla.
- RENAME: Cambia el nombre de un objeto.

DCL (Data Control Language):
- GRANT: Otorga permisos a un usuario.
- REVOKE: Revoca permisos otorgados.

TCL (Transaction Control Language):
- BEGIN o START TRANSACTION: Marca el inicio de una transacción.
- COMMIT: Confirma una transacción, aplicando los cambios.
- ROLLBACK: Revierte los cambios realizados en la transacción.
- SAVEPOINT: Crea un punto dentro de una transacción.
- RELEASE SAVEPOINT: Elimina un punto de guardado.
- SET TRANSACTION: Establece el aislamiento de la transacción.

###############################################################
2 - SQL EN LINUX
###############################################################

El uso de SQL en Linux generalmente implica el uso de sistemas de gestión de bases de datos como MySQL, PostgreSQL o SQLite. Las operaciones básicas se realizan a través de la línea de comandos o mediante herramientas gráficas. A continuación, se describen algunas de las herramientas más utilizadas:

- MySQL: Se accede a través del comando `mysql -u usuario -p`.
- PostgreSQL: Se accede a través del comando `psql -U usuario -d base_de_datos`.
- SQLite: Se accede mediante el comando `sqlite3 nombre_de_base_de_datos`.

###############################################################
3 - FUNCIONES AVANZADAS EN SQL
###############################################################

Triggers:
- Definición: Procedimientos que se ejecutan automáticamente antes o después de operaciones DML.
- Ejemplo: `CREATE TRIGGER nombre_trigger BEFORE INSERT ON tabla FOR EACH ROW BEGIN ... END;`

Funciones:
- Definición: Bloques de código que pueden ser llamados en consultas.
- Ejemplo: `CREATE FUNCTION nombre_funcion(parametros) RETURNS tipo_de_dato BEGIN ... END;`

Procedimientos (Stored Procedures):
- Definición: Bloques de código SQL que se almacenan y pueden ser reutilizados.
- Ejemplo: `CREATE PROCEDURE nombre_procedimiento(parametros) BEGIN ... END;`

Transacciones (Transactions):
- Definición: Un conjunto de operaciones que se ejecutan como una sola unidad.
- Comandos TCL: BEGIN, COMMIT, ROLLBACK.

Índices (Indexes):
- Definición: Estructuras que mejoran el rendimiento de las consultas.
- Ejemplo: `CREATE INDEX idx_nombre ON tabla(columna);`

Particionado de Tablas (Table Partitioning):
- Definición: Técnica para dividir grandes tablas en subtablas más pequeñas.
- Ventajas: Mejora el rendimiento y facilita la gestión.

CTE (Common Table Expressions):
- Definición: Consultas temporales que se pueden referenciar dentro de una consulta principal.
- Ejemplo: `WITH nombre_cte AS (SELECT ...) SELECT * FROM nombre_cte;`

Consultas Recursivas:
- Definición: Consultas que se llaman a sí mismas.
- Ejemplo: `WITH RECURSIVE nombre_cte AS (SELECT ... UNION ALL SELECT ...) SELECT * FROM nombre_cte;`

Disparadores de eventos (Event Schedulers):
- Definición: Procedimientos que se ejecutan en intervalos específicos.
- Ejemplo: `CREATE EVENT nombre_evento ON SCHEDULE AT ... DO ...;`

Replicación de Base de Datos:
- Definición: Técnica para mantener copias de bases de datos en múltiples servidores.
- Tipos: Replicación maestra-esclavo, maestro-maestro.

Restricciones y Llaves Foráneas (Foreign Key Constraints):
- Definición: Reglas que aseguran la integridad referencial entre tablas.
- Ejemplo: `ALTER TABLE tabla ADD CONSTRAINT fk_nombre FOREIGN KEY (columna) REFERENCES otra_tabla(columna);`

Tablas Temporales (Temporary Tables):
- Definición: Tablas que existen solo durante la sesión actual.
- Ejemplo: `CREATE TEMPORARY TABLE nombre_tabla (...);`

###############################################################
4 - TIPOS DE DATOS Y CÓMO SE UTILIZAN EN LA DB
###############################################################

1. Numéricos:
- **int**: Almacena números enteros.
- **tinyint**: Para valores pequeños (0-255).
- **float y double**: Para números con decimales.

2. Cadenas de Texto:
- **varchar**: Para cadenas de longitud variable.
- **text**: Para textos más largos.

3. Fechas y Horas:
- **datetime**: Para almacenar fechas y horas.
- **date**: Solo para almacenar la fecha.
- **time**: Solo para almacenar la hora.

4. Booleanos:
- **tinyint(1)**: Representa valores booleanos (0 es falso, 1 es verdadero).

5. Otros Tipos:
- **enum**: Almacena un valor de un conjunto definido de valores.
- **set**: Almacena múltiples valores de un conjunto definido.
