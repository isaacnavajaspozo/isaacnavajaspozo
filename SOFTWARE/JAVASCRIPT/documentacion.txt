# ======[ Índice ]======================================
# ======================================================

  # 1 - Configuración
  #         Enlaces
  #         Variables y constantes
  #         Estructuras de control
  #         Ciclos
  #         Funciones
  #         Objetos y métodos
  #         Clases
  #         JSON
  # 2 - JavaScript Core
  # 3 - Manipulación de Arrays
  #         Métodos de transformación
  #         Métodos de manipulación
  #         Búsqueda y verificación
  #         Iteración
  # 4 - Manipulación de Strings
  # 5 - Métodos Matemáticos 
  # 6 - Manipulación del DOM
  #         Selección de elementos
  #         Manipulación de elementos
  # 7 - Estilos
  #         classList
  # 8 - Eventos
  # 9 - setTimeout y setInterval
  # 10 - Almacenamiento
  #         LocalStorage y SessionStorage
  # 11 - Asincronía
  #         Fetch API
  #         Callbacks
  #         Promesas
  # 12 - Configuración de herramientas
  #         Prettier
  # 13 - JavaScript avanzado



# ======[ 1 - Configuración básica ]=================
# ======================================================

# Enlaces
#-------------------------------------------------

# enlace en html
<script src="js/myscript.js"></script>

# ejecutar el paquete de instalación package.json
npm install


# Variables y constantes
#-------------------------------------------------

var x = 10; // Variable con var: no tiene scope de bloque, solo tiene scope global o scope de función (los datos pueden verse modificados).
let y = 20; // Variable con let: scope de bloque { ... }
const PI = 3.14; // Constante

# Tipos de datos
let num = 42; // Número
let texto = "Hola, mundo!"; // Cadena
let esActivo = true; // Booleano
let colores = ["rojo", "verde", "azul"]; // Arreglo
let persona = { nombre: "Juan", edad: 30 }; // Objeto

# Testear
Typeof // para saber el tipo de variable.
console.log // para comprobar el resultado de un código js.


# Estructuras de control
#-------------------------------------------------

# Condicionales
if (x > 10) {
  console.log("Mayor a 10");
} else {
  console.log("10 o menor");
}

# switch
switch (colores[0]) {
  case "rojo":
    console.log("Color rojo");
    break;
  case "verde":
    console.log("Color verde");
    break;
  default:
    console.log("Otro color");
}


# Ciclos
#-------------------------------------------------

# for
for (let i = 0; i < 5; i++) {
  console.log(i); // Imprime 0 a 4
}

# foreach
// Usando forEach para recorrer el array numeros
let numeros = [1, 2, 3, 4, 5];
numeros.forEach((numero, indice) => {
  console.log(`Índice: ${indice}, Valor: ${numero}`);
});

# while
let i = 0;
while (i < 5) {
  console.log(i);
  i++;
}

# do while
do {
  console.log(i);
  i++;
} while (i < 10);


# Funciones
#-------------------------------------------------
function suma(a, b) {
  return a + b; // Retorna la suma de a y b
}

const resta = (a, b) => a - b; // Arrow Functions

console.log(suma(5, 3)); // 8
console.log(resta(5, 3)); // 2


# Objetos y métodos
#-------------------------------------------------
let coche = {
  marca: "Toyota",
  modelo: "Corolla",
  arrancar: function () {
    console.log("El coche está en marcha");
  },
};

coche.arrancar(); // Llama al método arrancar


# Clases
#-------------------------------------------------
class Animal {
  constructor(nombre) {
    this.nombre = nombre;
  }
  hablar() {
    console.log(`${this.nombre} está haciendo un ruido.`);
  }
}

class Perro extends Animal {
  hablar() {
    console.log(`${this.nombre} dice: ¡Guau!`);
  }
}

let miPerro = new Perro("Firulais");
miPerro.hablar(); // "Firulais dice: ¡Guau!"

# Módulos (ES6)
export function saludar(nombre) {
  return `Hola, ${nombre}!`;
}

import { saludar } from "./miModulo.js";
console.log(saludar("Juan")); // "Hola, Juan!"


# JSON
#-------------------------------------------------

let usuario = { id: 1, nombre: "Ana" };
let json = JSON.stringify(usuario); // Convierte a JSON
console.log(json); // '{"id":1,"nombre":"Ana"}'

let obj = JSON.parse(json); // Convierte de JSON a objeto
console.log(obj); // { id: 1, nombre: 'Ana' }


# ======[ 2 - JavaScript Core ]=========================
# ======================================================

+------------------------------------+
|                                    |                                        WEB APIs
|                                    |                                +------------------------+
|                JS                  |                                |  DOM (XML HttpRquest)  |
|                                    |                                |  AJAX (XMLHttpRequest) |
|  Memory Heap        Call Stack     |                                |  Timeout (setTimeout)  |
|                                    |                                +------------------------+
|   ⬜  ⬛          ▬▬▬▬▬▬▬▬▬▬▬▬▬   |                                            ↓
|     ⬛   ⬜       ▬▬▬▬▬▬▬▬▬▬▬▬▬   |                             
|                    ▬▬▬▬▬▬▬▬▬▬▬▬▬   |     Event Loop                      Callback Queue
|      ⬛    ⬜     ▬▬▬▬▬▬▬▬▬▬▬▬▬   |    +----------+         +-----------++----------++----------+
|     ⬜  ⬛        ▬▬▬▬▬▬▬▬▬▬▬▬▬   |    |   ↻ ↻   |    ←    |  OnClick  ||  OnLoad  ||  OnDone  |
|                                    |    +----------+         +-----------++----------++----------+
|                                    |
+------------------------------------+



Memoria y Ejecución:
--------------------------------------------------------
Memory Heap: Espacio donde se almacenan datos como variables y funciones de forma aleatoria.
Call Stack: Pila de tareas que gestiona la ejecución síncrona de funciones.
Garbage Collection: Limpia datos de memoria para evitar sobrecarga.
JavaScript Runtime: Maneja asincronía (DOM, AJAX, timers).
Event Loop: Gestiona qué tareas del runtime se colocan en el call stack.


# ======[ 3 - Manipulación de Arrays ]==================
# ======================================================

Métodos de transformación
--------------------------------------------------------
array.filter((el) => el > 10); // Filtra elementos que cumplen una condición
array.map((el) => el * 2);    // Aplica una transformación
array.reduce((acc, el) => acc + el, 0); // Reduce a un único valor

--------------------------------------------------------
array.push(el);               // Agrega al final
array.pop();                  // Elimina el último
array.unshift(el);            // Agrega al inicio
array.shift();                // Elimina el primero
array.indexOf() :             // Nos dice la posición del elemento del array.
array.find(()=> ...) :        // Nos va a buscar el elementos que deseemos encontrar en el array.
array.forEach(()=> ...) :     // Ejecuta la función por cada elemento del vector del array.
array.some(()=> ...) :        // Nos va a dar una respuesta de verdadero o falso para la condición que le indiquemos en el closure.

Búsqueda y verificación:
--------------------------------------------------------
array.indexOf(el);            // Índice de un elemento
array.find((el) => el > 10);  // Encuentra el primer elemento que cumple la condición
array.some((el) => el > 10);  // Verifica si algún elemento cumple la condición
array.includes(el);           // Verifica si incluye un elemento

Iteración:
--------------------------------------------------------
array.forEach((el) => console.log(el)); // Ejecuta una función en cada elemento

Ejemplo:
--------------------------------------------------------
let badge = new Array(10).fill(0).map(() => Math.floor(Math.random() * 8));    //crear un nuevo array con diez valores distintos con números random.


# ======[ 4 - Manipulación de Strings ]=================
# ======================================================

string.toUpperCase();        // Convierte a mayúsculas
string.toLowerCase();        // Convierte a minúsculas
string.charAt(0);            // Obtiene el carácter en una posición
string.length;               // Longitud de la cadena
string.replace("a", "b");    // Reemplaza caracteres
string.split(",");           // Convierte a array


# ======[ 5 - Métodos Matemáticos ]=====================
# ======================================================

Math.round(num);             // Redondea al entero más cercano
Math.ceil(num);              // Redondea hacia arriba
Math.floor(num);             // Redondea hacia abajo
Math.sign(num);              // Devuelve -1 o 1 dependiendo del signo


# ======[ 6 - Manipulación del DOM ]====================
# ======================================================

Selección de elementos:
--------------------------------------------------------
document.getElementById("id");        // Selección por ID
document.getElementsByClassName("class"); // Selección por clase
document.querySelector("selector");   // Primer elemento que coincide
document.querySelectorAll("selector"); // Todos los elementos que coinciden

Manipulación de elementos:
--------------------------------------------------------
element.innerHTML = "<p>Nuevo</p>";   // Cambia contenido HTML
element.textContent = "Texto";       // Cambia solo texto
element.setAttribute("attr", "value"); // Establece un atributo
element.getAttribute("attr");        // Obtiene un atributo
element.classList.add("class");      // Agrega una clase
element.classList.remove("class");   // Elimina una clase
element.classList.toggle("otraClase"); // Agrega o elimina la clase


# ======[ 7 - Estilos ]=================================
# ======================================================

# Propiedad que permite modificar estilos CSS en línea de un elemento.
contenedor.style.backgroundColor = "blue"; // Cambia el color de fondo a azul
contenedor.style.fontSize = "20px"; // Cambia el tamaño de la fuente

## classList
# Proporciona métodos para manipular las clases de un elemento:
# - add() para agregar una clase
# - remove() para eliminar una clase
# - toggle() para alternar una clase
# - contains() para verificar si un elemento tiene una clase
contenedor.classList.add("nuevaClase");
contenedor.classList.remove("nuevaClase");
contenedor.classList.toggle("otraClase"); // Agrega o elimina la clase

# ======[ 8 - Eventos ]=================================
# ======================================================

element.addEventListener("click", () => console.log("Click"));
element.removeEventListener("click", fn); // Elimina un evento

  Eventos comunes:
  onclick: Se dispara al hacer clic.
  onchange: Detecta cambios, útil en formularios.
  onsubmit: Se dispara al enviar un formulario.
  onerror: Acciones cuando ocurre un error.


# ======[ 9 - setTimeout y setInterval ]===============
# ======================================================

## setTimeout y setInterval: 
# setTimeout() ejecuta una función después de un tiempo especificado.
setTimeout(() => {
  console.log("Esto se ejecuta después de 2 segundos");
}, 2000);

# setInterval() ejecuta una función repetidamente cada cierto tiempo.
let intervalo = setInterval(() => {
  console.log("Esto se repite cada segundo");
}, 1000);

# clearInterval() detiene el intervalo.
clearInterval(intervalo);


# ======[ 10 - Almacenamiento ]==========================
# ======================================================

LocalStorage y SessionStorage:
--------------------------------------------------------
localStorage.setItem("key", "value"); // Guarda un valor
localStorage.getItem("key");         // Obtiene un valor
localStorage.removeItem("key");      // Elimina un valor
localStorage.clear();                // Limpia todo

sessionStorage.setItem("key", "value"); // Almacenamiento temporal


# ======[ 11 - Asincronía ]=============================
# ======================================================

Fetch API:
--------------------------------------------------------
fetch("https://api.example.com/data")
  .then((res) => res.json())
  .then((data) => console.log(data))
  .catch((err) => console.error("Error:", err));

Callbacks:
--------------------------------------------------------
function obtenerPersonaje(id, callback) {
  $.get(`https://api.example.com/personaje/${id}`, callback).fail(() => {
    console.log(`Error al obtener el personaje ${id}`);
  });
}

obtenerPersonaje(1, (personaje) => console.log(`Hola, soy ${personaje.name}`));

Promesas:
--------------------------------------------------------
const obtenerPersonaje = (id) =>
  new Promise((resolve, reject) => {
    $.get(`https://api.example.com/personaje/${id}`)
      .done(resolve)
      .fail(() => reject(id));
  });

Promise.all([1, 2, 3].map(obtenerPersonaje))
  .then((personajes) => console.log(personajes))
  .catch((err) => console.log(`Error con ID ${err}`));


# ======[ 12 - Configuración de herramientas ]==========
# ======================================================

Prettier:
--------------------------------------------------------
Archivo .prettierrc.js:
module.exports = {
  trailingComma: "es5",
  tabWidth: 4,
  semi: false,
  singleQuote: true,
};


# ======[ 13 - JavaScript avanzado ]====================
# ======================================================

Métodos avanzados:
Proxies: Trabaja con datos dinámicos en memoria.
componentWillUnmount(): Finaliza procesos al cerrar componentes (React).
prevProps y prevState: Maneja props o estados previos en React.
getSnapshotBeforeUpdate(): Obtiene valores previos al renderizado.

.options : para saber cuántas opciones hay en una lista desplegable específica; let x = array.options.length -> x = 44.
new Proxy(): nos va a cargar en memoria diferentes datos con los que trabajar, trabaja con los datos que se cargan después de haber iniciado la página, como por ejemplo un this.setTiout();
  + PevProps = trabaja con props actualizados o de ciclo.
  + PrevState = trabaja con states actualizados o de ciclo.
  + Snapshot = si tu componente tiene un ciclo de getSnapshotBeforeUpdate() el valor que devuelve se actualiza con snapshot, (es una forma de trabajo que raramente se utiliza).

mapear con .this:
--------------------------------------------------------

.bind() crea una nueva función con un contexto específico, sin ejecutarla inmediatamente. Ej; this.example.bind(this)
.call() ejecuta la función inmediatamente con el contexto proporcionado y los parámetros dados de forma individual.
.apply() ejecuta la función inmediatamente con el contexto proporcionado y los parámetros dados como un arreglo.
