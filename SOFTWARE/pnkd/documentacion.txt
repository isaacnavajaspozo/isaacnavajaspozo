================================================
=========[ COMPOSICIÓN DE CARPETAS ]============
================================================

|- /bin : sirve para guardar todos los scripts | El script "cli_script.php" sirve para ejecutar archivos desde consola.
|- /etc : es el núcleo del framework, aquí está la lógica del http, el kernel, el ORM, los helpers, la conexión de db y un sistema básico de seguridad.
|- /srv : en esta carpeta manejamos los archivos principales de la web, aquí está el MVC, el router, librerías externas y los archivos publicos.
|- /tmp : podemos ver los archivos temporales como logs temporales que vayamos a borrar con un cron o el archivo .env.
|- /var : en la cache puedo guardar archivos en memoria como cache, logs o archivos que hayan subido los usuarios desde la web.
|- index.php : este archivo es el que inicializa el framework.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


=======[ NUMERACIÓN DE LA DOCUMENTACIÓN ]=======

# Documentación marcada (# BOOKMARK: <5.a.cod>):
<1.cod> + Controladores:
    <1.a.cod> · errorController.php.
    <1.b.cod> · $this->model('exampleModel.php').
    <1.c.cod> · $this->view('landingPage.php', $data).
<2.cod> + vistas:
    <2.a.cod> · $data["version"].
<3.cod> + Modelos:
    <3.a.cod> · $this->select.
<4.cod> + Enrutador:
    <4.a.cod> · Http::get('/example', ['controller' => 'ExampleController', 'method' => 'index']).
<5.cod> + Debug:
    <5.a.cod> · Debug::kill($data).


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@[ EJEMPLOS ]@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

================================================
===============[ CONTROLADORES ]================
================================================
# BOOKMARK: <1.cod>

# Existe un controlador especial para las paginas que no coinciden con ninguna ruta.
# desde aquí puedes controlar la página 404.
errorController.php

------------------------------------------------
************************************************
------------------------------------------------
# errorController.php:
------------------------------------------------
class ErrorController {
    public function notFound() {
        echo "Página no encontrada";
    }
}
------------------------------------------------
************************************************
------------------------------------------------


------------------------------------------------
************************************************
------------------------------------------------
# Un ejemplo simple de controlador:
# exampleController.php:
------------------------------------------------
<?php
require_once './etc/ORM/db.php';

class ExampleController extends db {
    // Declarar la propiedad
    private $exampleModel;
    public function __construct() {
        parent::__construct(); 
    }

    public function index() {
        $data = array(
            'titulo' => 'Página de inicio'
        );  
        $this->view('index.php', $data);
    }
...
}
------------------------------------------------
************************************************
------------------------------------------------


------------------------------------------------
************************************************
------------------------------------------------
# Un atajo para llamar a los modelos: 
# $this->model('exampleModel.php');
------------------------------------------------
public function test() {
    $this->model('exampleModel.php');
    $exampleModel = new exampleModel;
    $data = $exampleModel->onemethod($id);
    
    // podemos utilizar el helper debug en los modelos, vistas y controladores si tenemos el error en true desde .env
    Debug::kill($data);
}
------------------------------------------------
************************************************
------------------------------------------------


------------------------------------------------
************************************************
------------------------------------------------
# Un atajo para llamar a las vistas, desde la que podemos pasarle valores dinámicos a través de un array:
# $this->view('landingPage.php', $data);
------------------------------------------------
public function index() {
    $data['version'] = getenv('VERSION');
    $data['kernelFile'] = file_exists('./etc/kernel.php') ? true : false;
    $data['ORMDir'] = is_dir('./etc/ORM') ? true : false;
    $this->view('landingPage.php', $data);
}
------------------------------------------------
# desde la vista html (.php):
<p><span><?= $data["version"]; ?></span></p>
------------------------------------------------
************************************************
------------------------------------------------


------------------------------------------------
************************************************
------------------------------------------------
# otro ejemplo de método:
------------------------------------------------
public function getUser($id) {
    $this->model('exampleModel.php');
    $exampleModel = new exampleModel;
    $data = $exampleModel->getUserById($id);
    if ($data) {
        echo "Usuario encontrado: <br>";
        $this->view('index.php', $data);
    } else {
        echo "Usuario no encontrado";
    }
}
------------------------------------------------
************************************************
------------------------------------------------



================================================
===================[ VISTAS ]===================
================================================
# BOOKMARK: <2.cod>

# vista html (.php):
# desde las vistas podemos llamar a los valores dinámicos que le pasamos desde el controlador
<p><span><?= $data["version"]; ?></span></p>



================================================
==================[ MODELOS ]===================
================================================
# BOOKMARK: <3.cod>

------------------------------------------------
************************************************
------------------------------------------------
# ejemplo de modelo (sentencia select):
------------------------------------------------
public function getUserById($id) {
    // Utilizar el método select para obtener el usuario por ID
    $user = $this->select("*", "usuarios", "WHERE id = '$id'");
    return $user;
}
------------------------------------------------
************************************************
------------------------------------------------


------------------------------------------------
************************************************
------------------------------------------------
# ejemplo de modelo (sentencia insert):
------------------------------------------------
public function postUser() {
    // Insertar un nuevo usuario
    $id = $this->insert("usuarios", "id, titulo", "'7', '44'");
    return $id;
}
------------------------------------------------
************************************************
------------------------------------------------



================================================
=================[ ENRUTADOR ]==================
================================================
# BOOKMARK: <4.cod>

# en el caso de que estemos haciendo una API es recomendado crear otro archivo enrutador asociado a web.php

------------------------------------------------
************************************************
------------------------------------------------
# ejemplo de enrutador:
------------------------------------------------
<?php

//Definir controladores
require_once('./srv/controllers/landingPageController.php');
require_once('./srv/controllers/exampleController.php');
require_once('./srv/controllers/errorController.php');

//Definir rutas
Http::get('/', ['controller' => 'LandingPage', 'method' => 'index']);

//Ejemplo
Http::get('/example', ['controller' => 'ExampleController', 'method' => 'index']);
Http::get('/user/:id', ['controller' => 'ExampleController', 'method' => 'getUser']);
Http::post('/post', ['controller' => 'ExampleController', 'method' => 'store']);
------------------------------------------------
************************************************
------------------------------------------------



================================================
==================[ DEBUGGER ]==================
================================================
# BOOKMARK: <4.cod>

# Todos estos métodos solo se activarán si desde nuestro .env tenemos "ERRORS=true"

# BOOKMARK: <5.a.cod>
# Método para depurar código desde /srv 
# Debug::kill es un atajo que detectará el tipo de archivo automáticamente para hacer un print_r o var_dump según convenga.
Debug::kill($data);

